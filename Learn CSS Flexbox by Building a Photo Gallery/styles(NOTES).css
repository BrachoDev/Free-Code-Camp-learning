* {
    /*(8) in order to make sure that the img stays inside the gallery we have to use the following setting*/
    box-sizing: border-box;
}
/*(10) activate these rules to see the lines that separate "gallery" and "img"
.gallery {
    width: 50%;
    border: 5px solid red;
}

img {
    width: 100%;
    padding: 5px;
    border: 5px solid blue; 
}*/

.header {
    text-align: center;
    /*(13) use "text-transform: uppercase" to change the text to uppercase*/
    text-transform: uppercase;
    padding: 32px;
    background-color: #0a0a23;
    color: #fff;
    border-bottom: 4px solid #fdb347;
}

body {
    margin: 0px;
    font-family: sans-serif;
    background-color: #f5f6f7;
}
.gallery img {
    width: 100%;
    max-width: 350px;
    height: 300px;
    /*(20) This property and value prevent the images from distorting*/
    object-fit: cover;
    border-radius: 10px;

}

.gallery {
    /*(14) by using "display:flex" we can make a container a one-dimensional CSS layout;*/
    display: flex;
    /*(15) Flexbox has a main and cross axis. The main axis is defined by the "flex-direction" property, which has four possible values:
* row (default): horizontal axis with flex items from left to right
* row-reverse: horizontal axis with flex items from right to left
* column: vertical axis with flex items from top to bottom
* column-reverse: vertical axis with flex items from bottom to top*/
    flex-direction: row;
    /*(16) "flex-wrap" property  determines how flex items behave when the flex container is too small. Setting it to "wrap" will allow the items to wrap to the next row or column. "nowrap" (default) will prevent your items from wrapping and shrink them if needed.*/
    flex-wrap: wrap;
    /*(17) The "justify-content" property determines how the items inside a flex container are positioned along the main axis, affecting their position and the space around them.*/
    justify-content: center;
    /*(18) The "align-items" property positions the flex content along the cross axis. NOTE: This depends on how the "flex-direction" is set. It will follow the opposite value of "flex-direction"*/
    align-items: center;
    padding: 20px 10px;
    max-width: 1400px;
    margin: 0 auto;
    /*(21) Use "gap" to add some space between flex content*/
    gap: 16px;
}
/* (23) The "::after" pseudo-element creates an element that is the last child of the selected element. We can use it to add an empty element after the last image. If we give it the same width as the images it will push the last image to the left when the gallery is in a two-column layout.*/
.gallery::after {
    content: "";
    width: 350px;
}
